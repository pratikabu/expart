/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BalanceView.java
 *
 * Created on Jun 5, 2010, 11:53:18 PM
 */

package com.pratikabu.expart.reports;

import com.gmail.pratikabu.pls.components.Transaction;
import com.gmail.pratikabu.pls.controller.DatabaseController;
import com.gmail.pratikabu.pls.controller.TransactionHandler;
import com.pratikabu.expart.boundary.TransactionEntry;
import com.pratikabu.expart.components.CurrencyTextField;
import com.pratikabu.expart.components.UsefulMethods;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Blue
 */
public class TransactionView extends javax.swing.JDialog {
    private ArrayList<Integer> ids = new ArrayList<Integer>();

    private int previousSelectedRow = -1;//holds the last selected row

    /** Creates new form BalanceView */
    public TransactionView(java.awt.Frame parent) {
        super(parent, false);
        initComponents();

        renderBalance();

        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Transaction View");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Transaction Amount", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Filters");
        jButton2.setEnabled(false);

        jButton1.setText("View Details");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Transaction Details:"));

        jSplitPane1.setDividerLocation(350);
        jSplitPane1.setResizeWeight(0.5);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Receiver:"));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Receiver", "Amount", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Payee:"));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Payee", "Amount", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
        );

        jButton4.setForeground(java.awt.Color.red);
        jButton4.setText("Remove");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 448, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        select();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //render transaction details
        renderTransactionDetails();

        if(evt.getClickCount() == 2){
            select();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN){
            renderTransactionDetails();
        }
    }//GEN-LAST:event_jTable1KeyPressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int row = jTable1.getSelectedRow();

        if(row != -1){
            int tid = ids.get(row);
            int choice = JOptionPane.showConfirmDialog(this, "This will remove the selected transaction.\n"
                    + "This step cannot be undone.\n"
                    + "Current Transaction Selected: " + tid,
                    "Remove?", JOptionPane.YES_NO_OPTION);

            if(choice == JOptionPane.YES_OPTION){
                String sql = "DELETE FROM Transaction WHERE tid=?";
                TransactionHandler th = new TransactionHandler();
                th.addQuery(new Transaction(sql, new Object[]{tid}));
                if(th.executeQuery()){
                    this.dispose();
                    new TransactionView(null);
                }
            }
        }else{
            JOptionPane.showMessageDialog(this, "Select any transaction to continue.", "No Selection", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables

    private void renderBalance() {
        String sql="SELECT * " +
                "FROM TransactionDetails "
                + "WHERE tProfile=?";

        DatabaseController dbc=new DatabaseController();
        ResultSet rset=dbc.getQueryResultSet(sql, new Object[]{UsefulMethods.profile.getPid()});

        try{
            String[] data=new String[3];
            while(rset.next()){
                ids.add(rset.getInt(1));
                data[0]=UsefulMethods.toString(rset.getDate(2), UsefulMethods.SHORT);
                data[1] = CurrencyTextField.formatCurrency(rset.getDouble(3));
                data[2]=rset.getString(4);

                //add to table
                ((DefaultTableModel)jTable1.getModel()).addRow(data);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error fetching data.", "Eh..", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }finally{
            dbc.closeConnection();
        }
    }

    private void select() {
        int row = jTable1.getSelectedRow();

        if(row != -1){
            TransactionEntry.showVoucher(null, ids.get(row));
        }else{
            JOptionPane.showMessageDialog(this, "Select any transaction to continue.", "No Selection", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void renderTransactionDetails() {
        int row = jTable1.getSelectedRow();

        if(row != -1 && row != previousSelectedRow){
            int tid = ids.get(row);

            String sqlPayee = "SELECT * "
                    + "FROM PayeeDetails "
                    + "WHERE ptid=?";
            String sqlRec = "SELECT * "
                    + "FROM ReceiverDetails "
                    + "WHERE rtid=?";

            DatabaseController dbc = new DatabaseController();
            ResultSet rset = dbc.getQueryResultSet(sqlPayee, new Object[]{tid});
            
            DatabaseController dbcRec = new DatabaseController();
            ResultSet rsetRec = dbcRec.getQueryResultSet(sqlRec, new Object[]{tid});

            for (int i = jTable3.getRowCount() - 1; i >= 0; i--)
                ((DefaultTableModel) jTable3.getModel()).removeRow(i);

            for (int i = jTable2.getRowCount() - 1; i >= 0; i--)
                ((DefaultTableModel) jTable2.getModel()).removeRow(i);

            try {
                String[] data = new String[3];
                while (rset.next()) {
                    //display records
                    data[0] = rset.getString(2);
                    data[1] = rset.getString(4);
                    data[2] = CurrencyTextField.formatCurrency(rset.getDouble(5));

                    //add to table
                    ((DefaultTableModel) jTable3.getModel()).addRow(data);
                }

                while (rsetRec.next()) {
                    //display records
                    data[0] = rsetRec.getString(2);
                    data[1] = rsetRec.getString(4);
                    data[2] = CurrencyTextField.formatCurrency(rsetRec.getDouble(5));

                    //add to table
                    ((DefaultTableModel) jTable2.getModel()).addRow(data);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error fetching data for Transaction Details.", "Eh..", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } finally {
                dbc.closeConnection();
                dbcRec.closeConnection();
            }
            //////////////////////////////////////////////////////////////
        }

        previousSelectedRow = row;
    }

}
