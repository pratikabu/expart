/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BalanceView.java
 *
 * Created on Jun 5, 2010, 11:53:18 PM
 */

package com.pratikabu.expart.reports;

import com.gmail.pratikabu.pls.controller.DatabaseController;
import com.pratikabu.expart.components.BalanceViewInfo;
import com.pratikabu.expart.components.CurrencyTextField;
import com.pratikabu.expart.components.UsefulMethods;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Blue
 */
public class BalanceView extends javax.swing.JDialog {
    private ArrayList<BalanceViewInfo> records = new ArrayList<BalanceViewInfo>();

    /** Creates new form BalanceView */
    public BalanceView(java.awt.Frame parent) {
        super(parent, false);
        initComponents();

        renderBalance();

        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Balance View");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User", "Payment Mode", "Total Paid", "Total Used", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Final Balance:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("0.00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 563, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void renderBalance() {
        double finalBalance=0.0d;
        String sqlPayee="SELECT * "
                + "FROM PayeeSum "
                + "WHERE tProfile=?";
        String sqlRec="SELECT * "
                + "FROM ReceiverSum "
                + "WHERE tProfile=?";

        DatabaseController dbc=new DatabaseController();
        ResultSet rset=dbc.getQueryResultSet(sqlPayee, new Object[]{UsefulMethods.profile.getPid()});

        try{
            while(rset.next()){
                BalanceViewInfo bvi = new BalanceViewInfo();
                bvi.setUid(rset.getInt(1));
                bvi.setuName(rset.getString(2));
                bvi.setPaymentMode(rset.getInt(3));
                bvi.setPaymentName(rset.getString(4));
                bvi.setTotalPayed(rset.getDouble(5));

                records.add(bvi);//add directly to the arraylist
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error fetching data.", "Eh..", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }finally{
            dbc.closeConnection();
        }

        DatabaseController dbcRec=new DatabaseController();
        ResultSet rsetRec=dbcRec.getQueryResultSet(sqlRec, new Object[]{UsefulMethods.profile.getPid()});
        int nextRecordIndex = - 1; //where the next record should be added

        try{
            while (rsetRec.next()) {
                nextRecordIndex = - 1;
                BalanceViewInfo bvi = new BalanceViewInfo();
                bvi.setUid(rsetRec.getInt(1));
                bvi.setuName(rsetRec.getString(2));
                bvi.setPaymentMode(rsetRec.getInt(3));
                bvi.setPaymentName(rsetRec.getString(4));
                bvi.setTotalReceived(rsetRec.getDouble(5));

                ///
                boolean pmExists = false; //variable for checking whether user and payment mode for that user already exists or not
                for (BalanceViewInfo rec : records) {
                    if((rec.getUid() == bvi.getUid())){
                        nextRecordIndex = records.indexOf(rec);//update the value of nextIndex once the user is found
                        if (rec.getPaymentMode() == bvi.getPaymentMode()) {
                            pmExists = true;
                            rec.setTotalReceived(bvi.getTotalReceived());

                            break;
                        }
                    }
                }

                if (!pmExists){
                    if(nextRecordIndex == -1)
                        records.add(bvi);
                    else
                        records.add(nextRecordIndex, bvi);//add to the arraylist
                }
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error fetching data.", "Eh..", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }finally{
            dbcRec.closeConnection();
        }

        //display all records
        String[] data=new String[5];
        for(BalanceViewInfo bvi : records){
            data[0] = bvi.getuName();
            data[1] = bvi.getPaymentName();
            data[2] = CurrencyTextField.formatCurrency(bvi.getTotalPayed());
            data[3] = CurrencyTextField.formatCurrency(bvi.getTotalReceived());

            double diff = bvi.difference();
            data[4] = CurrencyTextField.formatCurrency(diff);

            finalBalance += diff;

            //add to table
            ((DefaultTableModel) jTable1.getModel()).addRow(data);
        }

        jLabel2.setText(CurrencyTextField.formatCurrency(finalBalance));
    }

}
